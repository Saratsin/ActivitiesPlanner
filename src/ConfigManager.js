/**
 * ConfigManager - Handles all configuration, properties, and constants
 */
class ConfigManager {
  // Configuration constants
  static IS_QA_TESTING = false;
  static POLL_CREATION_HOUR = 9;
  static POLL_CHECK_HOUR = 17;
  static MIN_VOTES_REQUIRED = 6;
  static MIN_BASKETBALL_VOTES_REQUIRED = 4;
  static DAYS_TO_SYNC = 7;
  static SOURCE_EVENT_ID_KEY = 'sourceEventId';
  static POLL_PROPERTY_PREFIX = 'POLL_';
  static SCRIPT_TIMEZONE = Session.getScriptTimeZone();

  // Voting schedule configuration
  static VOTING_SCHEDULE = {
    0: { activity: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', activityStartTime: '18:00', checkDelayMinutes: (ConfigManager.POLL_CHECK_HOUR - ConfigManager.POLL_CREATION_HOUR) * 60 - 1 },
    2: { activity: '–§—É—Ç–±–æ–ª', activityStartTime: '19:00', checkDelayMinutes: (ConfigManager.POLL_CHECK_HOUR - ConfigManager.POLL_CREATION_HOUR) * 60 - 1 },
    3: { activity: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', activityStartTime: '18:00', checkDelayMinutes: (ConfigManager.POLL_CHECK_HOUR - ConfigManager.POLL_CREATION_HOUR) * 60 - 1 },
    4: { activity: '–§—É—Ç–±–æ–ª', activityStartTime: '19:00', checkDelayMinutes: (ConfigManager.POLL_CHECK_HOUR - ConfigManager.POLL_CREATION_HOUR) * 60 - 1 },
    5: { activity: '–ë–∞—Å–∫–µ—Ç–±–æ–ª', activityStartTime: '18:00', checkDelayMinutes: (ConfigManager.POLL_CHECK_HOUR - ConfigManager.POLL_CREATION_HOUR) * 60 - 1 }
  };

  // Message templates
  static MESSAGES = {
    pollQuestion: (activity, activityStartTime, dateStr) => `${activity} ${activityStartTime} (${dateStr})`,
    pollOptions: ['‚úÖ', '‚ùå'],
    bookingSecured: (votes, activity, dateStr) => `‚úÖ ${votes} –ª—é–¥–µ–π –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–æ –∑–∞. –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è ${activity}—É (${dateStr}) –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ —Å–∏–ª—ñ üí™\n\n–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç–º–∞–π–¥–∞–Ω—á–∏–∫–∞: \nhttps://na-sm-booking.shevchuk.it \n\n–ö–∞–ª–µ–Ω–¥–∞—Ä –∑ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º–∏: \nhttps://na-sm-calendar.shevchuk.it`,
    bookingCancelled: (votes, activity, activityStartTime, dateStr) => `‚ùå –õ–∏—à–µ ${votes} ${votes === 1 ? '–ª—é–¥–∏–Ω–∞ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∞' : '–ª—é–¥–µ–π –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–æ'} –∑–∞. –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –¥–ª—è ${activity}—É (${dateStr}) —Å–∫–∞—Å–æ–≤–∞–Ω–æ, —Å–ª–æ—Ç–∏ –ø—ñ—Å–ª—è ${activityStartTime} —Å—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–ª—å–Ω—ñ.\n\n–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–ø–æ—Ä—Ç–º–∞–π–¥–∞–Ω—á–∏–∫–∞: \nhttps://na-sm-booking.shevchuk.it \n\n–ö–∞–ª–µ–Ω–¥–∞—Ä –∑ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º–∏: \nhttps://na-sm-calendar.shevchuk.it`,
    infoStateReset: (count) => `‚ÑπÔ∏è –î–∞–Ω—ñ –ø–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è—Ö –≤ –±–æ—Ç—ñ —Å–∫–∏–Ω—É—Ç–æ: –í–∏–¥–∞–ª–µ–Ω–æ ${count} ${count === 1 ? '–∞–∫—Ç–∏–≤–Ω–∏–π –∑–∞–ø–∏—Å' : '–∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤'}.`,
    testMessage: "–£—Å—ñ–º –ø—Ä–∏–≤—ñ—Ç :)\n\n–Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç —è–∫–∏–π –±—É–¥–µ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –∑ –≥—Ä—É–ø–æ–≤–∏–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–º—É –º–∞–π–¥–∞–Ω—á–∏–∫—É –≤ –ù–ê. –î–µ—Å—å –º—ñ–∂ 09 —ñ 10 —Ä–∞–Ω–∫—É —è –∑–∞–ø—É—Å–∫–∞—Ç–∏–º—É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —â–æ–¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —è–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–∞ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –≤ —Å–µ—Ä–µ–¥—É –±—É–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç–∏—Å—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —â–æ–¥–æ –±–∞—Å–∫–µ—Ç–±–æ–ª—É –≤ —á–µ—Ç–≤–µ—Ä, –≤ —ñ–Ω—à—ñ –¥–Ω—ñ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –±—É–¥–µ –¥–µ–Ω—å —É –¥–µ–Ω—å).\n\n–ü–æ—Ç—ñ–º –≤ –¥–µ–Ω—å —Ü—ñ—î—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–µ—Å—å –º—ñ–∂ 17:00 —Ç–∞ 17:10 —è –ø–æ–≥–ª—è–Ω—É —Å–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–æ –∑–∞. –Ø–∫—â–æ –º–µ–Ω—à–µ 6, —Ç–æ –±—Ä–æ–Ω—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±—É–¥–µ —Å–∫–∞—Å–æ–≤–∞–Ω–∞, —ñ —Å–ª–æ—Ç–∏ —Å—Ç–∞–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –Ø–∫—â–æ –∂ 6 —ñ –±—ñ–ª—å—à–µ –ª—é–¥–µ–π –±—É–¥–µ –∑–∞, —Ç–æ –±—Ä–æ–Ω—å –∑–∞–ª–∏—à–∞—Ç–∏–º–µ—Ç—å—Å—è –≤ —Å–∏–ª—ñ.\n\n–°–ø–æ–¥—ñ–≤–∞—é—Å—å —è –ø–æ–ª–µ–≥—à—É –≤–∞–º –∂–∏—Ç—Ç—è –∑ —á–∞—Å–æ–º, —ñ –ø–µ—Ä–µ–≤–∞–≥ –≤—ñ–¥ –º–æ–≥–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –±—É–¥–µ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–µ–¥–æ–ª—ñ–∫—ñ–≤)"
  };

  constructor() {
    this.cachedProperties = {};
  }

  /**
   * Get a property from PropertiesService with caching
   * @param {string} key - Property key
   * @returns {string|null} Property value
   */
  getProperty(key) {
    if (!this.cachedProperties.hasOwnProperty(key)) {
      this.cachedProperties[key] = PropertiesService.getScriptProperties().getProperty(key);
    }
    return this.cachedProperties[key];
  }

  /**
   * Get target group chat ID
   * @returns {string} Chat ID
   */
  getTargetGroupChatId() {
    return this.getProperty("TARGET_GROUP_CHAT_ID");
  }

  /**
   * Get Telegram bot token
   * @returns {string} Bot token
   */
  getTelegramBotToken() {
    return this.getProperty("TELEGRAM_BOT_TOKEN");
  }

  /**
   * Get target calendar ID
   * @returns {string} Calendar ID
   */
  getTargetCalendarId() {
    return this.getProperty("TARGET_CALENDAR_ID");
  }

  /**
   * Get source calendar ID
   * @returns {string} Calendar ID
   */
  getSourceCalendarId() {
    if (ConfigManager.IS_QA_TESTING) {
      return this.getProperty("QA_SOURCE_CALENDAR_ID");
    }
    return this.getProperty("SOURCE_CALENDAR_ID");
  }

  /**
   * Get minimum votes required for an activity
   * @param {string} activity - Activity name
   * @returns {number} Minimum votes required
   */
  getMinVotesRequired(activity) {
    return activity === '–ë–∞—Å–∫–µ—Ç–±–æ–ª' ? ConfigManager.MIN_BASKETBALL_VOTES_REQUIRED : ConfigManager.MIN_VOTES_REQUIRED;
  }

  /**
   * Get voting schedule entry for a day
   * @param {number} dayOfWeek - Day of week (0-6)
   * @returns {Object|null} Schedule entry
   */
  getScheduleEntry(dayOfWeek) {
    return ConfigManager.VOTING_SCHEDULE[dayOfWeek] || null;
  }
}
